
Laboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074a  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000666  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000226  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e7  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  000016b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001782  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_18>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z10serialUARTv>:
	sei();
}

void serialUART()
{
	DDRD |= (1<< DDD1); 
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	82 60       	ori	r24, 0x02	; 2
  84:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<DDD0);
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	8e 7f       	andi	r24, 0xFE	; 254
  8a:	8a b9       	out	0x0a, r24	; 10
	
	//configurado para enviar y recibir. 
	UCSR0A = 0; 
  8c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B |= (1<< RXCIE0) | (1<<RXEN0) | (1<<TXEN0); 
  90:	e1 ec       	ldi	r30, 0xC1	; 193
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	88 69       	ori	r24, 0x98	; 152
  98:	80 83       	st	Z, r24
	UCSR0C |= (1<< UCSZ01) | (1<<UCSZ00);
  9a:	e2 ec       	ldi	r30, 0xC2	; 194
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	86 60       	ori	r24, 0x06	; 6
  a2:	80 83       	st	Z, r24
	UBRR0 = 103; //valor calculado para los 9600
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  b0:	08 95       	ret

000000b2 <_Z5setupv>:

/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli(); 
  b2:	f8 94       	cli
	serialUART();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <_Z10serialUARTv>
	DDRB = 0xFF; 
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 b9       	out	0x04, r24	; 4
	sei();
  bc:	78 94       	sei
  be:	08 95       	ret

000000c0 <_Z10serialLECTc>:
	UCSR0C |= (1<< UCSZ01) | (1<<UCSZ00);
	UBRR0 = 103; //valor calculado para los 9600
}
void serialLECT(char letra)
{
	while ((UCSR0A & (1<<UDRE0)) == 0);
  c0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c4:	95 ff       	sbrs	r25, 5
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <_Z10serialLECTc>
	UDR0 = letra; 
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	08 95       	ret

000000ce <main>:

/****************************************/
// Main Function
int main (void)
{
	setup();
  ce:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z5setupv>
	serialLECT('E');
  d2:	85 e4       	ldi	r24, 0x45	; 69
  d4:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z10serialLECTc>
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0xa>

000000da <_Z11mostrarLectc>:
	UDR0 = letra; 
	
}
void mostrarLect(char dato)
{
	PORTB = dato; 
  da:	85 b9       	out	0x05, r24	; 5
  dc:	08 95       	ret

000000de <__vector_18>:
}

/****************************************/
// Interrupt routines
ISR(USART_RX_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	mostrarLect(UDR0);
 100:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 104:	0e 94 6d 00 	call	0xda	; 0xda <_Z11mostrarLectc>
 108:	ff 91       	pop	r31
 10a:	ef 91       	pop	r30
 10c:	bf 91       	pop	r27
 10e:	af 91       	pop	r26
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	7f 91       	pop	r23
 116:	6f 91       	pop	r22
 118:	5f 91       	pop	r21
 11a:	4f 91       	pop	r20
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
