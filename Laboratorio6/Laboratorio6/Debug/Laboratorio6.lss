
Laboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00000260  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a01  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071b  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003be  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  0000191c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000491  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c1  00000000  00000000  00001ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002196  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 38       	cpi	r26, 0x8A	; 138
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  8e:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z10serialUARTv>:
	UDR0 = letra; 
	
}
void mostrarLect(char dato)
{
	PORTB = dato; 
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	e1 ec       	ldi	r30, 0xC1	; 193
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 69       	ori	r24, 0x98	; 152
  aa:	80 83       	st	Z, r24
  ac:	e2 ec       	ldi	r30, 0xC2	; 194
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	86 60       	ori	r24, 0x06	; 6
  b4:	80 83       	st	Z, r24
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c2:	08 95       	ret

000000c4 <_Z10serialLECTc>:
  c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	95 ff       	sbrs	r25, 5
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <_Z10serialLECTc>
  cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d0:	08 95       	ret

000000d2 <_Z11stringTermiPc>:
}

void stringTermi(char* oracion)
{
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; *(oracion+i) != '\0'; i++)
  da:	c0 e0       	ldi	r28, 0x00	; 0
  dc:	f8 01       	movw	r30, r16
  de:	ec 0f       	add	r30, r28
  e0:	f1 1d       	adc	r31, r1
  e2:	80 81       	ld	r24, Z
  e4:	88 23       	and	r24, r24
  e6:	21 f0       	breq	.+8      	; 0xf0 <_Z11stringTermiPc+0x1e>
	{
		serialLECT(*(oracion+i));
  e8:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z10serialLECTc>
	PORTB = dato; 
}

void stringTermi(char* oracion)
{
	for (uint8_t i = 0; *(oracion+i) != '\0'; i++)
  ec:	cf 5f       	subi	r28, 0xFF	; 255
  ee:	f6 cf       	rjmp	.-20     	; 0xdc <_Z11stringTermiPc+0xa>
	{
		serialLECT(*(oracion+i));
	}
}
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	08 95       	ret

000000f8 <_Z5ADC_1v>:

void ADC_1()
{
	//ADMUX = 0;
	ADMUX |= (1<<REFS0) | (1<<ADLAR) | (1 << MUX0) |  (1 << MUX1) | (1<<MUX2); //
  f8:	ec e7       	ldi	r30, 0x7C	; 124
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	87 66       	ori	r24, 0x67	; 103
 100:	80 83       	st	Z, r24
	
	//ADCSRA = 0;
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADEN);// |  (1<<ADIE) ;
 102:	ea e7       	ldi	r30, 0x7A	; 122
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	87 68       	ori	r24, 0x87	; 135
 10a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <_Z5setupv>:

/****************************************/
// NON-Interrupt subroutines
void setup()
{
	cli(); 
 114:	f8 94       	cli
	DDRB = 0xFF; 
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	84 b9       	out	0x04, r24	; 4
	serialUART();
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <_Z10serialUARTv>
	ADC_1(); 
 11e:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z5ADC_1v>
	sei();
 122:	78 94       	sei
 124:	08 95       	ret

00000126 <_Z6lecADCv>:
	ADCSRA |= (1<<ADSC);
}

uint8_t lecADC()
{
	ADCSRA |= (1<<ADSC); //Empezar conversión
 126:	ea e7       	ldi	r30, 0x7A	; 122
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC)); 
 130:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 134:	86 fd       	sbrc	r24, 6
 136:	fc cf       	rjmp	.-8      	; 0x130 <_Z6lecADCv+0xa>
	return ADCH; //Leer los valores altos
 138:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 13c:	08 95       	ret

0000013e <_Z4menuv>:

void menu()
{
	stringTermi("\n\nMenu:\n");
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z11stringTermiPc>
	stringTermi("1. Leer Potenciometro\n");
 146:	89 e0       	ldi	r24, 0x09	; 9
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z11stringTermiPc>
	stringTermi("2. Enviar ASCII\n");
 14e:	80 e2       	ldi	r24, 0x20	; 32
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z11stringTermiPc>
	stringTermi("Seleccione una opcion:\n");
 156:	81 e3       	ldi	r24, 0x31	; 49
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z11stringTermiPc>
 15e:	08 95       	ret

00000160 <main>:

/****************************************/
// Main Function
int main (void)
{
	setup();
 160:	0e 94 8a 00 	call	0x114	; 0x114 <_Z5setupv>
	serialLECT('E');
 164:	85 e4       	ldi	r24, 0x45	; 69
 166:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z10serialLECTc>
	serialLECT('G');
 16a:	87 e4       	ldi	r24, 0x47	; 71
 16c:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z10serialLECTc>
	serialLECT('3');
 170:	83 e3       	ldi	r24, 0x33	; 51
 172:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z10serialLECTc>
	stringTermi("\n El delay es del diablo");
 176:	89 e4       	ldi	r24, 0x49	; 73
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z11stringTermiPc>
	menu();
 17e:	0e 94 9f 00 	call	0x13e	; 0x13e <_Z4menuv>
 182:	ff cf       	rjmp	.-2      	; 0x182 <main+0x22>

00000184 <_Z3numh>:
	stringTermi("2. Enviar ASCII\n");
	stringTermi("Seleccione una opcion:\n");
}

void num(uint8_t numero)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
	//se separa el numero sus cifras correspondientes
	uint8_t centenas = numero / 100; //saber centenas
 188:	99 e2       	ldi	r25, 0x29	; 41
 18a:	89 9f       	mul	r24, r25
 18c:	91 2d       	mov	r25, r1
 18e:	11 24       	eor	r1, r1
 190:	92 95       	swap	r25
 192:	9f 70       	andi	r25, 0x0F	; 15
	uint8_t decenas = (numero % 100) / 10; //saber decenas
 194:	d8 2f       	mov	r29, r24
 196:	24 e6       	ldi	r18, 0x64	; 100
 198:	92 9f       	mul	r25, r18
 19a:	d0 19       	sub	r29, r0
 19c:	11 24       	eor	r1, r1
 19e:	cd ec       	ldi	r28, 0xCD	; 205
 1a0:	dc 9f       	mul	r29, r28
 1a2:	d1 2d       	mov	r29, r1
 1a4:	11 24       	eor	r1, r1
 1a6:	d6 95       	lsr	r29
 1a8:	d6 95       	lsr	r29
 1aa:	d6 95       	lsr	r29
	uint8_t unidades = numero % 10;	//saber unidades
 1ac:	8c 9f       	mul	r24, r28
 1ae:	c1 2d       	mov	r28, r1
 1b0:	11 24       	eor	r1, r1
 1b2:	c6 95       	lsr	r28
 1b4:	c6 95       	lsr	r28
 1b6:	c6 95       	lsr	r28
 1b8:	cc 0f       	add	r28, r28
 1ba:	2c 2f       	mov	r18, r28
 1bc:	22 0f       	add	r18, r18
 1be:	22 0f       	add	r18, r18
 1c0:	c2 0f       	add	r28, r18
 1c2:	8c 1b       	sub	r24, r28
 1c4:	c8 2f       	mov	r28, r24
	
	//Es el punto de origen del conteo
	serialLECT(centenas + '0');
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	89 0f       	add	r24, r25
 1ca:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z10serialLECTc>
	serialLECT(decenas + '0');
 1ce:	80 e3       	ldi	r24, 0x30	; 48
 1d0:	8d 0f       	add	r24, r29
 1d2:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z10serialLECTc>
	serialLECT(unidades + '0');
 1d6:	80 e3       	ldi	r24, 0x30	; 48
 1d8:	8c 0f       	add	r24, r28
 1da:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z10serialLECTc>
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <__vector_18>:
/****************************************/
// Interrupt routines
ISR(USART_RX_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	//mostrarLect(UDR0);
	uint8_t opcion = UDR0; // Capturar dato recibido
 206:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (opcion == '1')
 20a:	81 33       	cpi	r24, 0x31	; 49
 20c:	49 f4       	brne	.+18     	; 0x220 <__vector_18+0x3c>
	{
		uint8_t lectura = lecADC(); // Leer ADC7
 20e:	0e 94 93 00 	call	0x126	; 0x126 <_Z6lecADCv>
		num(lectura); // Enviar como carácter ASCII
 212:	0e 94 c2 00 	call	0x184	; 0x184 <_Z3numh>
		stringTermi("\n"); // Nueva línea para orden
 216:	84 e7       	ldi	r24, 0x74	; 116
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z11stringTermiPc>
 21e:	0b c0       	rjmp	.+22     	; 0x236 <__vector_18+0x52>
	}
	else if (opcion == '2')
 220:	82 33       	cpi	r24, 0x32	; 50
 222:	29 f4       	brne	.+10     	; 0x22e <__vector_18+0x4a>
	{
		stringTermi("\nEnviando ASCII...\n");
 224:	82 e6       	ldi	r24, 0x62	; 98
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z11stringTermiPc>
 22c:	04 c0       	rjmp	.+8      	; 0x236 <__vector_18+0x52>
	}
	else
	{
		stringTermi("\nOpcion invalida.\n");
 22e:	86 e7       	ldi	r24, 0x76	; 118
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z11stringTermiPc>
	}
	
	menu(); // Volver a mostrar el menu
 236:	0e 94 9f 00 	call	0x13e	; 0x13e <_Z4menuv>
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	7f 91       	pop	r23
 248:	6f 91       	pop	r22
 24a:	5f 91       	pop	r21
 24c:	4f 91       	pop	r20
 24e:	3f 91       	pop	r19
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
